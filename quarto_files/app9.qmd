# Research Question Exploration {#app-Research .appendix}

```{python}
import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns
from sklearn.naive_bayes import MultinomialNB,CategoricalNB,BernoulliNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    accuracy_score,roc_auc_score,
    precision_score, recall_score, 
    f1_score, confusion_matrix,
    ConfusionMatrixDisplay
)
```

## Question 1
1. Which factors within avaialble HMDA data are the greatest influencers in mortgage approvals?

## Question 2
1. Are protected classes of applicants and co-applicants strong predictors for determining loan approval?  Who and what is most impacted?

```{python data-import}
#| echo: true
#| eval: true
data_pc = pd.read_csv('../data/data-one-hot.csv')
data_npc = pd.read_csv('../data/data-one-hot-npc.csv')
data_labels = pd.read_csv('../data/final_clean_r2.csv') #['outcome']
labels = data_labels['outcome'].copy()
```

```{python}
#age only
import re
to_drop = []
curr = data_pc.copy()
for col in curr.columns:
    if len(re.findall('cant_ethnicity|cant_age|sex',col)) > 0:
        to_drop.append(col)

curr.drop(labels=to_drop,axis=1,inplace=True)

bnb_pc = BernoulliNB()
bnb_npc = BernoulliNB()
X_train, X_test, y_train, y_test = train_test_split(
    data_pc,
    labels,
    stratify=labels,
    test_size=0.2,
    random_state=8808
)

X_train_npc, X_test_npc, y_train, y_test = train_test_split(
    data_npc,
    labels,
    stratify=labels,
    test_size=0.2,
    random_state=8808
)
bnb_pc.fit(X_train,y_train)
bnb_npc.fit(X_train_npc,y_train)
```

```{python}
y_pred_pc = bnb_pc.predict(X_test)
y_pred_npc = bnb_npc.predict(X_test_npc)
results = pd.DataFrame({
    'Model':[],
    'Data':[],
    'Accuracy':[],
    'Precision':[],
    'Recall':[],
    'F1':[],
    'ROC-AUC':[]
})

results.loc[len(results)] = {
    'Model':'BernoulliNB',
    'Data':'With Protected Classes',
    'Accuracy':accuracy_score(y_test,y_pred_pc),
    'Precision':precision_score(y_test,y_pred_pc),
    'Recall':recall_score(y_test,y_pred_pc),
    'F1':f1_score(y_test,y_pred_pc),
    'ROC-AUC':roc_auc_score(y_test,y_pred_pc)
}

results.loc[len(results)] = {
    'Model':'BernoulliNB',
    'Data':'Without Protected Classes',
    'Accuracy':accuracy_score(y_test,y_pred_npc),
    'Precision':precision_score(y_test,y_pred_npc),
    'Recall':recall_score(y_test,y_pred_npc),
    'F1':f1_score(y_test,y_pred_npc),
    'ROC-AUC':roc_auc_score(y_test,y_pred_npc)
}
fig,axes=plt.subplots(nrows=1,ncols=2)
ConfusionMatrixDisplay(
    confusion_matrix(
        y_pred=y_pred_pc,y_true=y_test
    ),
    display_labels=['Deny','Approve']
).plot(ax=axes[0])
ConfusionMatrixDisplay(
    confusion_matrix(
        y_pred=y_pred_npc,y_true=y_test
    ),
    display_labels=['Deny','Approve']
).plot(ax=axes[1])
axes[0].set_title('With Protected\nClasses')
axes[1].set_title('Without Protected\nClasses')
plt.suptitle("Confusion Matrices - Bernoulli Naive Bayes")
plt.tight_layout()
plt.show()
display(results)
```

```{python}
#age only
import re
to_drop = []
curr = data_pc.copy()
for col in curr.columns:
    if len(re.findall('cant_ethnicity|cant_race|cant_sex',col)) > 0:
        to_drop.append(col)

curr.drop(labels=to_drop,axis=1,inplace=True)

bnb_pc = BernoulliNB()
bnb_npc = BernoulliNB()
X_train, X_test, y_train, y_test = train_test_split(
    data_pc,
    labels,
    stratify=labels,
    test_size=0.2,
    random_state=8808
)

X_train_npc, X_test_npc, y_train, y_test = train_test_split(
    data_npc,
    labels,
    stratify=labels,
    test_size=0.2,
    random_state=8808
)
bnb_pc.fit(X_train,y_train)
bnb_npc.fit(X_train_npc,y_train)
```

```{python}
y_pred_pc = bnb_pc.predict(X_test)
y_pred_npc = bnb_npc.predict(X_test_npc)
results = pd.DataFrame({
    'Model':[],
    'Data':[],
    'Accuracy':[],
    'Precision':[],
    'Recall':[],
    'F1':[],
    'ROC-AUC':[]
})

results.loc[len(results)] = {
    'Model':'BernoulliNB',
    'Data':'With Protected Classes',
    'Accuracy':accuracy_score(y_test,y_pred_pc),
    'Precision':precision_score(y_test,y_pred_pc),
    'Recall':recall_score(y_test,y_pred_pc),
    'F1':f1_score(y_test,y_pred_pc),
    'ROC-AUC':roc_auc_score(y_test,y_pred_pc)
}

results.loc[len(results)] = {
    'Model':'BernoulliNB',
    'Data':'Without Protected Classes',
    'Accuracy':accuracy_score(y_test,y_pred_npc),
    'Precision':precision_score(y_test,y_pred_npc),
    'Recall':recall_score(y_test,y_pred_npc),
    'F1':f1_score(y_test,y_pred_npc),
    'ROC-AUC':roc_auc_score(y_test,y_pred_npc)
}
fig,axes=plt.subplots(nrows=1,ncols=2)
ConfusionMatrixDisplay(
    confusion_matrix(
        y_pred=y_pred_pc,y_true=y_test
    ),
    display_labels=['Deny','Approve']
).plot(ax=axes[0])
ConfusionMatrixDisplay(
    confusion_matrix(
        y_pred=y_pred_npc,y_true=y_test
    ),
    display_labels=['Deny','Approve']
).plot(ax=axes[1])
axes[0].set_title('With Protected\nClasses')
axes[1].set_title('Without Protected\nClasses')
plt.suptitle("Confusion Matrices - Bernoulli Naive Bayes")
plt.tight_layout()
plt.show()
display(results)
```







```{python}
outcome_copy = X_test.copy()
outcome_copy['pc_prediction'] = y_pred_pc
outcome_copy['npc_prediction'] = y_pred_npc
outcome_copy['outcome'] = y_test
misclas = outcome_copy.loc[(outcome_copy['outcome']==1) & (outcome_copy['pc_prediction']==0)].copy()
summary_fp = pd.DataFrame(misclas.sum(axis=0) / len(outcome_copy)).reset_index()
summary_fp.columns = ['class','False Positives']
summary_fp = summary_fp.loc[summary_fp['class'].str.contains('applicant_sex|applicant_age|applicant_race|ethnicity')]
summary_fp.sort_values(by='False Positives',inplace=True,ascending=False)
```

```{python}
outcome_copy = X_test.copy()
outcome_copy['pc_prediction'] = y_pred_pc
outcome_copy['npc_prediction'] = y_pred_npc
outcome_copy['outcome'] = y_test
misclas = outcome_copy.loc[(outcome_copy['outcome']==0) & (outcome_copy['pc_prediction']==1)].copy()
summary_fn = pd.DataFrame(misclas.sum(axis=0) / len(outcome_copy)).reset_index()
summary_fn.columns = ['class','False Negatives']
summary_fn = summary_fn.loc[summary_fn['class'].str.contains('applicant_sex|applicant_age|applicant_race|ethnicity')]
summary_fn.sort_values(by='False Negatives',inplace=True,ascending=False)
```

```{python}
comb = summary_fp.merge(summary_fn,left_index=True,right_index=True)
comb = comb[comb.columns[[0,1,3]]]
comb.columns = ['Class','False Positives','False Negatives']
```

```{python}
comb_sex = comb.loc[comb['Class'].str.contains('applicant_sex')].copy()
comb_age = comb.loc[comb['Class'].str.contains('applicant_age')].copy()
comb_race = comb.loc[comb['Class'].str.contains('applicant_race')].copy()
comb_ethn = comb.loc[comb['Class'].str.contains('applicant_ethnicity')].copy()
```

    <!-- * Explore this with Bernoulli Naive Bayes -->

## Question 3
1. If protected classes are strong predictors for loan approval, is the predictive strength greater for one institution over another?

    <!-- * Explore this with label encoded data, potentially with Bernoulli Naive Bayes -->

```{python}
#JP Morgan
```


```{python}
#Navy Federal
```


```{python}
#Rocket Mortgage
```


```{python}
#Bank of America
```


```{python}
#Wells Fargo
```

## Question 4
1. If protected classes are strong predictors for loan approval, is the predictor's strength higher within a particular geographic region?

    <!-- * Explore this with Bernoulli Naive Bayes -->

## Question 4
1. How is predictive model performance impacted when including or excluding protected class data in training and testing data? e.g. Does performance increase when including?  If so, by how much?

    <!-- * for DT, MNB, CNB, BNB, LogReg - performance has significant differences.  None of them justify leveraging protected class information as a predictive variable. -->

## Question 5
1. How well do predictive models perform when trained using protected class information that was collected by a lender observationally (e.g. via inspection of surname or visually seeing the applicant)?

## Question 6
1. How do loan-specific or home-specific qualities and features, absent borrower features, impact predictions of approval or denial?

## Question 7
1. Are borrower features aside from race as or more associated with a result of loan denial? e.g. is being female or being under or over a certain age as associated with loan denial as being a certain race?

## Question 8
1. Can available HMDA data be leveraged to effectively predict mortgage borrower interest rates?

## Question 9
1. If effective mortgage rate predictions are possible, how do they change when including or controlling for protected class data in the model?

## Question 10
1. Can selected / identified features and outcome (e.g. debt-to-income-ratio, loan-to-value ratio, *and* decision for approval or denial of the loan) be used to predict the borrower's protected class features of race, gender, or age group?

## Question 11
1. As inferred by lenders, can various latent variables be identified as impactful within modeling, and can the degree or extent of their impact on the decision process be determined as it pertains to mortgage underwriting decisions?
